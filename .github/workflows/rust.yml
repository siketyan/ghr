name: Rust

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types:
      - published

env:
  CARGO_TERM_COLOR: always

jobs:
  checks:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - uses: Swatinem/rust-cache@v2

      - name: Install latest stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          components: rustfmt,clippy

      - name: Run clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ github.token }}
          args: --all-features

      - name: Run rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all --check

      - name: Run tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features

      - name: Qodana Scan
        uses: JetBrains/qodana-action@main
        env:
          QODANA_TOKEN: ${{ secrets.QODANA_TOKEN }}

  build:
    strategy:
      matrix:
        target:
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          - aarch64-apple-darwin
          - x86_64-unknown-linux-gnu
          - aarch64-unknown-linux-gnu
        include:
          - target: x86_64-pc-windows-msvc
            host: windows-2022
            artifact: ghr.exe
          - target: x86_64-apple-darwin
            host: macos-12
            artifact: ghr
          - target: aarch64-apple-darwin
            host: macos-12
            artifact: ghr
          - target: x86_64-unknown-linux-gnu
            host: ubuntu-22.04
            artifact: ghr
          - target: aarch64-unknown-linux-gnu
            host: ubuntu-22.04
            artifact: ghr
            cross: true
    runs-on: ${{ matrix.host }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Install latest stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - id: cache-key
        run: echo "key=$(echo '${{ toJSON(matrix) }}' | shasum -a 256)" >> $GITHUB_OUTPUT

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ steps.cache-key.outputs.key }}

      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --features vendored --target '${{ matrix.target }}'
          use-cross: ${{ matrix.cross }}

      - name: Compress artifacts into .tar.gz file
        run: tar -C ./target/${{ matrix.target }}/release -czf ghr-${{ matrix.target }}.tar.gz ${{ matrix.artifact }}

      - uses: actions/upload-artifact@v3
        with:
          path: ghr-${{ matrix.target }}.tar.gz

      - uses: svenstaro/upload-release-action@v2
        if: ${{ github.event_name == 'release' }}
        with:
          file: ghr-${{ matrix.target }}.tar.gz
          overwrite: true

  deploy:
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'release' }}
    needs:
      - checks
    steps:
      - uses: actions/checkout@v3

      - uses: Swatinem/rust-cache@v2

      - name: Install latest stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Log into crates.io
        uses: actions-rs/cargo@v1
        with:
          command: login
          args: ${{ secrets.CRATES_IO_TOKEN }}

      - name: Publish to crates.io
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --allow-dirty

  brew:
    runs-on: ubuntu-22.04
    if: ${{ github.event_name == 'release' }}
    needs:
      - build
    steps:
      - uses: actions/checkout@v3

      - uses: siketyan/release-to-registry-action@7e2a91ef78e61dccdb2e8b9401ae54ec58fab4fc
        with:
          path: 'Formula/ghr.rb'
          assets: |-
            macos_x86_64=ghr-x86_64-apple-darwin.tar.gz
            macos_aarch64=ghr-aarch64-apple-darwin.tar.gz
            linux_x86_64=ghr-x86_64-unknown-linux-gnu.tar.gz
            linux_aarch64=ghr-aarch64-unknown-linux-gnu.tar.gz
          message: 'feat(ghr): Release ${{ github.event.release.tag_name }}'
          template: './resources/formula/ghr.rb.mustache'
          token: '${{ secrets.HOMEBREW_TAP_TOKEN }}'
          hash: 'sha256'
          targetRepo: 'homebrew-tap'
          branch: 'ghr/${{ github.event.release.tag_name }}'
          author: 'github-actions[bot] <github-actions[bot]@users.noreply.github.com>'
          committer: 'github-actions[bot] <github-actions[bot]@users.noreply.github.com>'
